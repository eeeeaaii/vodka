v2:~(|package @list ~(_bind @hhead &" lst()"(_~(_head ~(_head @lst_)_)_)_) ~(_bind @htail &" lst()"(_~(_head ~(_tail @lst_)_)_)_) ~(_bind @thead &" lst()"(_~(_tail ~(_head @lst_)_)_)_) ~(_bind @ttail &" lst()"(_~(_tail ~(_tail @lst_)_)_)_) ~(_bind @second &" lst()"(_~(_head ~(_tail @lst_)_)_)_) ~(_bind @third &" lst()"(_~(_head ~(_tail ~(_tail @lst_)_)_)_)_) ~(_bind @fourth &" lst()"(_~(_head ~(_tail ~(_tail ~(_tail @lst_)_)_)_)_)_) ~"bind to"(_@put-contents-of--in &"() lst() dstlst()"(|~(_concatenate-lists @lst @dstlst_)|)_) ~(_bind @reverse &"() lst()"(|~"reduce with"(|@lst &" item accum()"(|~"push into"(_@item @accum_)|) (||)|)|)_) ~"bind to"(_@flatten &"() lst()"(|~(_let @recurse-flatten &" nex dlist()"(|~(|first-non-nil ~"if then else"(_~(_not ~(_is-list @nex_)_) ~"hard-push into"(_@nex @dlist_)_) ~"if then else"(_~(_not ~(_is-empty @nex_)_) ~(|begin ~(_recurse-flatten ~(_tail @nex_) @dlist_) ~(_recurse-flatten ~(_head @nex_) @dlist_)|)_) [nil]|)|)_) ~"let be"(_@r (||)_) ~(_recurse-flatten @lst @r_) @r|)_) ~"bind to"(_@concatenate-lists &"() lst1() lst2()"(|~(|if ~(_is-empty @lst1_) ~(_copy @lst2_) ~"push into"(_~(_head @lst1_) ~(_concatenate-lists ~(_tail @lst1_) @lst2_)_)|)|)_)|)