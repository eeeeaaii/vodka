v2:~(|package @util ~(_bind @LOG [doc](__)_) ~(_bind @log &"() nex"(|~(_cram ~(_copy @nex_) @LOG_)|)_) ~(_bind @caar &" lst()"(|~(_car ~(_car @lst_)_)|)_) ~(_bind @cadr &" lst()"(|~(_car ~(_cdr @lst_)_)|)_) ~(_bind @cdar &" lst()"(|~(_cdr ~(_car @lst_)_)|)_) ~(_bind @cddr &" lst()"(|~(_cdr ~(_cdr @lst_)_)|)_) ~(_bind @second &" lst()"(|~(_first ~(_rest @lst_)_)|)_) ~(_bind @third &" lst()"(|~(_first ~(_rest ~(_rest @lst_)_)_)|)_) ~(_bind @fourth &" lst()"(|~(_first ~(_rest ~(_rest ~(_rest @lst_)_)_)_)|)_) ~(_bind @process &"() list()"(|~(|util:traverse-nexes-satisfying-and-do @list &"! item"(|~(_is-command @item_)|) &" item~"(|~(_eval @item_)|)|)|)_) ~(_bind @range-from-to &"() start# end#"(|~(|if ~(_::gt:: @start @end_) [word](__) ~(_cons @start ~(_range-from-to ~(_::pl:: @start #1_) @end_)_)|)|)_) ~(_bind @reverse &"() lst()"(|~(|reduce-with-starting @lst &" item accum()"(|~(_cons @item @accum_)|) [word](__)|)|)_) ~(_bind @traverse-atoms-of-and-do &" nex f&"(|~(|first-non-nil ~(_if ~(_not ~(_is-list @nex_)_) ~(_f @nex_)_) ~(_if ~(_is-expectation @nex_) @nex_) ~(_if ~(_is-empty @nex_) @nex_) ~(_if !yes ~(|cons ~(_traverse-atoms-of-and-do ~(_first @nex_) @f_) ~(_traverse-atoms-of-and-do ~(_rest @nex_) @f_)|)_)|)|)_) ~(_bind @traverse-atoms-satisfying-and-do &" nex testf& dof&"(|~(|first-non-nil ~(_if ~(_not ~(_is-list @nex_)_) ~(|if ~(_testf @nex_) ~(_dof @nex_) @nex|)_) ~(_if ~(_is-expectation @nex_) @nex_) ~(_if ~(_is-empty @nex_) @nex_) ~(_if !yes ~(|cons ~(_traverse-atoms-satisfying-and-do ~(_first @nex_) @testf @dof_) ~(_traverse-atoms-satisfying-and-do ~(_rest @nex_) @testf @dof_)|)_)|)|)_) ~(_bind @traverse-nexes-satisfying-and-do &" nex testf& dof&"(|~(|first-non-nil ~(_if ~(_testf @nex_) ~(_dof @nex_)_) ~(_if ~(_not ~(_is-list @nex_)_) @nex_) ~(_if ~(_is-expectation @nex_) @nex_) ~(_if ~(_is-empty @nex_) @nex_) ~(_if !yes ~(|cons ~(_traverse-nexes-satisfying-and-do ~(_first @nex_) @testf @dof_) ~(_traverse-nexes-satisfying-and-do ~(_rest @nex_) @testf @dof_)|)_)|)|)_) ~(_bind @nth-from &" n# lst()"(|~(|if ~(_::eq:: @n #0_) ~(_car @lst_) ~(_nth-from ~(_- @n #1_) ~(_rest @lst_)_)|)|)_) ~(_bind @length-of &"# lst()"(|~(|reduce-with-starting @lst &" item accum#"(|~(_::pl:: @accum #1_)|) #0|)|)_) ~(_bind @list-cat &"() lst1() lst2()"(|~(|if ~(_is-empty @lst1_) ~(_copy @lst2_) ~(_cons ~(_first @lst1_) ~(_list-cat ~(_rest @lst1_) @lst2_)_)|)|)_) ~(_bind @put-contents-in &"() lst() dstlst()"(|~(_list-cat @lst @dstlst_)|)_) ~(_bind @contains-item-satisfying &"! lst() f&"(|~(|reduce-with-starting @lst &" item accum()"(|~(|if ~(_f @item_) !yes @accum|)|) !no|)|)_) ~(_bind @with-only-items-satisfying &"() lst() f&"(|~(_filter-with @list @f_)|)_) ~(_bind @lookup-key-in &" key table()"(|~(_let @reclookup &" temptable()"(|~(|if-then ~(_not ~(_is-empty @temptable_)_) ~(|begin ~(_let @entry ~(_first @temptable_)_) ~(_let @thiskey ~(_first @entry_)_) ~(_let @value ~(_first ~(_rest @entry_)_)_) ~(|if-then-else ~(_equal @key @thiskey_) @value ~(_reclookup ~(_rest @temptable_)_)|)|)|)|)_) ~(_reclookup @table_)|)_) ~(_bind @remove-all-entries-with-key-from &"() key table()"(|~(|reduce-with-starting @table &" item accum()"(|~(|if ~(_equal @key ~(_first @item_)_) @accum ~(_cons @item @accum_)|)|) [word](__)|)|)_) ~(_bind @add-key-value-to &" key value table()"(|~(_cons ~(_cons @key ~(_cons @value [word](__)_)_) @table_)|)_) ~(_bind @key-is-in &"! key table()"(|~(_contains-item-satisfying @table &" entry"(|~(_equal @key ~(_first @entry_)_)|)_)|)_)|)