// Generated by PEG.js v0.11.0-master.b7b87ea, https://pegjs.org/

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  // istanbul ignore next
  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found, location) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    },

    not: function(expectation) {
      return "not " + describeExpectation(expectation.expected);
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "v2:";
  var peg$c1 = "(";
  var peg$c2 = ")";
  var peg$c3 = "(_";
  var peg$c4 = "_)";
  var peg$c5 = "(|";
  var peg$c6 = "|)";
  var peg$c7 = "(,";
  var peg$c8 = ",)";
  var peg$c9 = ";";
  var peg$c10 = "*;";
  var peg$c11 = "*";
  var peg$c12 = "&;";
  var peg$c13 = "&";
  var peg$c14 = "~;";
  var peg$c15 = "~";
  var peg$c16 = "^;";
  var peg$c17 = "^";
  var peg$c18 = ":";
  var peg$c19 = "[";
  var peg$c20 = "]";
  var peg$c21 = "[;";
  var peg$c22 = "!;";
  var peg$c23 = "yes";
  var peg$c24 = "no";
  var peg$c25 = "!";
  var peg$c26 = "@;";
  var peg$c27 = "@";
  var peg$c28 = "_";
  var peg$c29 = "#;";
  var peg$c30 = "-";
  var peg$c31 = "#";
  var peg$c32 = "$;";
  var peg$c33 = "$";
  var peg$c34 = "?";
  var peg$c35 = "%;";
  var peg$c36 = "%";
  var peg$c37 = "\"";
  var peg$c38 = "{";
  var peg$c39 = ".";
  var peg$c40 = "<";
  var peg$c41 = ">";
  var peg$c42 = "`";
var peg$c43 = "}";
var peg$c44 = "|}";
var peg$c45 = "||";

var peg$r0 = /^[+=*\/<>]/;
var peg$r1 = /^[a-zA-Z0-9:.\-]/;
var peg$r2 = /^[a-zA-Z0-9\-]/;
var peg$r3 = /^[a-zA-Z0-9]/;
var peg$r4 = /^[0-9]/;
var peg$r5 = /^[^`]/;
  var peg$r6 = /^[^"]/;
  var peg$r7 = /^[^|}]/;
  var peg$r8 = /^[ \r\n\t]/;

  var peg$e0 = peg$literalExpectation("v2:", false);
  var peg$e1 = peg$literalExpectation("(", false);
  var peg$e2 = peg$literalExpectation(")", false);
  var peg$e3 = peg$literalExpectation("(_", false);
  var peg$e4 = peg$literalExpectation("_)", false);
  var peg$e5 = peg$literalExpectation("(|", false);
  var peg$e6 = peg$literalExpectation("|)", false);
  var peg$e7 = peg$literalExpectation("(,", false);
  var peg$e8 = peg$literalExpectation(",)", false);
  var peg$e9 = peg$literalExpectation(";", false);
  var peg$e10 = peg$literalExpectation("*;", false);
  var peg$e11 = peg$literalExpectation("*", false);
  var peg$e12 = peg$literalExpectation("&;", false);
  var peg$e13 = peg$literalExpectation("&", false);
  var peg$e14 = peg$literalExpectation("~;", false);
  var peg$e15 = peg$literalExpectation("~", false);
  var peg$e16 = peg$literalExpectation("^;", false);
  var peg$e17 = peg$literalExpectation("^", false);
  var peg$e18 = peg$literalExpectation(":", false);
  var peg$e19 = peg$classExpectation(["+", "=", "*", "/", "<", ">"], false, false);
  var peg$e20 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], ":", ".", "-"], false, false);
  var peg$e21 = peg$literalExpectation("[", false);
  var peg$e22 = peg$literalExpectation("]", false);
  var peg$e23 = peg$literalExpectation("[;", false);
  var peg$e24 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
  var peg$e25 = peg$literalExpectation("!;", false);
  var peg$e26 = peg$literalExpectation("yes", false);
  var peg$e27 = peg$literalExpectation("no", false);
  var peg$e28 = peg$literalExpectation("!", false);
  var peg$e29 = peg$literalExpectation("@;", false);
  var peg$e30 = peg$literalExpectation("@", false);
  var peg$e31 = peg$literalExpectation("_", false);
  var peg$e32 = peg$literalExpectation("#;", false);
  var peg$e33 = peg$literalExpectation("-", false);
  var peg$e34 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e35 = peg$literalExpectation("#", false);
  var peg$e36 = peg$literalExpectation("$;", false);
  var peg$e37 = peg$literalExpectation("$", false);
  var peg$e38 = peg$literalExpectation("?", false);
  var peg$e39 = peg$literalExpectation("%;", false);
  var peg$e40 = peg$literalExpectation("%", false);
  var peg$e41 = peg$literalExpectation(".", false);
  var peg$e42 = peg$literalExpectation("<", false);
  var peg$e43 = peg$literalExpectation(">", false);
  var peg$e44 = peg$literalExpectation("`", false);
var peg$e45 = peg$classExpectation(["`"], true, false);
  var peg$e46 = peg$literalExpectation("\"", false);
  var peg$e47 = peg$classExpectation(["\""], true, false);
  var peg$e48 = peg$literalExpectation("{", false);
  var peg$e49 = peg$literalExpectation("}", false);
  var peg$e50 = peg$classExpectation(["|", "}"], true, false);
  var peg$e51 = peg$literalExpectation("|}", false);
  var peg$e52 = peg$literalExpectation("||", false);
  var peg$e53 = peg$classExpectation([" ", "\r", "\n", "\t"], false, false);

  var peg$f0 = function(NEX) { return NEX; };
  var peg$f1 = function(INST_NAME, PRIVATE, TAGLIST, CHILDREN) { return PF.makeInstanceList(INST_NAME, CHILDREN, PRIVATE, TAGLIST, 'h', true /* nonmutable */); };
  var peg$f2 = function(INST_NAME, PRIVATE, TAGLIST, CHILDREN) { return PF.makeInstanceList(INST_NAME, CHILDREN, PRIVATE, TAGLIST, 'v', true /* nonmutable */); };
  var peg$f3 = function(INST_NAME, PRIVATE, TAGLIST, CHILDREN) { return PF.makeInstanceList(INST_NAME, CHILDREN, PRIVATE, TAGLIST, 'z', true /* nonmutable */); };
  var peg$f4 = function(INST_NAME, PRIVATE, TAGLIST, CHILDREN) { return PF.makeInstanceList(INST_NAME, CHILDREN, PRIVATE, TAGLIST, 'h'); };
  var peg$f5 = function(INST_NAME, PRIVATE, TAGLIST, CHILDREN) { return PF.makeInstanceList(INST_NAME, CHILDREN, PRIVATE, TAGLIST, 'v'); };
  var peg$f6 = function(INST_NAME, PRIVATE, TAGLIST, CHILDREN) { return PF.makeInstanceList(INST_NAME, CHILDREN, PRIVATE, TAGLIST, 'z'); };
  var peg$f7 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeOrgList(CHILDREN, PRIVATE, TAGLIST, 'h', true /* nonmutable */); };
  var peg$f8 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeOrgList(CHILDREN, PRIVATE, TAGLIST, 'v', true /* nonmutable */); };
  var peg$f9 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeOrgList(CHILDREN, PRIVATE, TAGLIST, 'z', true /* nonmutable */); };
  var peg$f10 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeOrgList(CHILDREN, PRIVATE, TAGLIST, 'h'); };
  var peg$f11 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeOrgList(CHILDREN, PRIVATE, TAGLIST, 'v'); };
  var peg$f12 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeOrgList(CHILDREN, PRIVATE, TAGLIST, 'z'); };
  var peg$f13 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeExpList(CHILDREN, PRIVATE, TAGLIST, 'h', true /* nonmutable */); };
  var peg$f14 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeExpList(CHILDREN, PRIVATE, TAGLIST, 'v', true /* nonmutable */); };
  var peg$f15 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeExpList(CHILDREN, PRIVATE, TAGLIST, 'z', true /* nonmutable */); };
  var peg$f16 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeExpList(CHILDREN, PRIVATE, TAGLIST, 'h'); };
  var peg$f17 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeExpList(CHILDREN, PRIVATE, TAGLIST, 'v'); };
  var peg$f18 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeExpList(CHILDREN, PRIVATE, TAGLIST, 'z'); };
  var peg$f19 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeLambdaList(CHILDREN, PRIVATE, TAGLIST, 'h', true /* nonmutable */); };
  var peg$f20 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeLambdaList(CHILDREN, PRIVATE, TAGLIST, 'v', true /* nonmutable */); };
  var peg$f21 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeLambdaList(CHILDREN, PRIVATE, TAGLIST, 'z', true /* nonmutable */); };
  var peg$f22 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeLambdaList(CHILDREN, PRIVATE, TAGLIST, 'h'); };
  var peg$f23 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeLambdaList(CHILDREN, PRIVATE, TAGLIST, 'v'); };
  var peg$f24 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeLambdaList(CHILDREN, PRIVATE, TAGLIST, 'z'); };
  var peg$f25 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeCommandList(null, CHILDREN, PRIVATE, TAGLIST, 'h', true /* nonmutable */); };
  var peg$f26 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeCommandList(null, CHILDREN, PRIVATE, TAGLIST, 'v', true /* nonmutable */); };
  var peg$f27 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeCommandList(null, CHILDREN, PRIVATE, TAGLIST, 'z', true /* nonmutable */); };
  var peg$f28 = function(PRIVATE, TAGLIST, NAME, CHILDREN) { return PF.makeCommandList(NAME, CHILDREN, PRIVATE, TAGLIST, 'h', true /* nonmutable */); };
  var peg$f29 = function(PRIVATE, TAGLIST, NAME, CHILDREN) { return PF.makeCommandList(NAME, CHILDREN, PRIVATE, TAGLIST, 'v', true /* nonmutable */); };
  var peg$f30 = function(PRIVATE, TAGLIST, NAME, CHILDREN) { return PF.makeCommandList(NAME, CHILDREN, PRIVATE, TAGLIST, 'z', true /* nonmutable */); };
  var peg$f31 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeCommandList(null, CHILDREN, PRIVATE, TAGLIST, 'h'); };
  var peg$f32 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeCommandList(null, CHILDREN, PRIVATE, TAGLIST, 'v'); };
  var peg$f33 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeCommandList(null, CHILDREN, PRIVATE, TAGLIST, 'z'); };
  var peg$f34 = function(PRIVATE, TAGLIST, NAME, CHILDREN) { return PF.makeCommandList(NAME, CHILDREN, PRIVATE, TAGLIST, 'h'); };
  var peg$f35 = function(PRIVATE, TAGLIST, NAME, CHILDREN) { return PF.makeCommandList(NAME, CHILDREN, PRIVATE, TAGLIST, 'v'); };
  var peg$f36 = function(PRIVATE, TAGLIST, NAME, CHILDREN) { return PF.makeCommandList(NAME, CHILDREN, PRIVATE, TAGLIST, 'z'); };
  var peg$f37 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeInstantiatorList(CHILDREN, PRIVATE, TAGLIST, 'h', true /* nonmutable */); };
  var peg$f38 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeInstantiatorList(CHILDREN, PRIVATE, TAGLIST, 'v', true /* nonmutable */); };
  var peg$f39 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeInstantiatorList(CHILDREN, PRIVATE, TAGLIST, 'z', true /* nonmutable */); };
  var peg$f40 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeInstantiatorList(CHILDREN, PRIVATE, TAGLIST, 'h'); };
  var peg$f41 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeInstantiatorList(CHILDREN, PRIVATE, TAGLIST, 'v'); };
  var peg$f42 = function(PRIVATE, TAGLIST, CHILDREN) { return PF.makeInstantiatorList(CHILDREN, PRIVATE, TAGLIST, 'z'); };
  var peg$f43 = function(SYM) { return SYM; };
  var peg$f44 = function(NAME) { return NAME; };
  var peg$f45 = function(CHILDREN) { return CHILDREN; };
  var peg$f46 = function(INST_NAME, PRIVATE, TAGLIST) { return PF.makeInstanceAtom(INST_NAME, PRIVATE, TAGLIST, true /* nonmutable */); };
  var peg$f47 = function(INST_NAME, PRIVATE, TAGLIST) { return PF.makeInstanceAtom(INST_NAME, PRIVATE, TAGLIST); };
  var peg$f48 = function(INST_NAME_DATA) { return INST_NAME_DATA; };
  var peg$f49 = function(TAGLIST) { return PF.makeBool(true, TAGLIST, true /* nonmutable */); };
  var peg$f50 = function(TAGLIST) { return PF.makeBool(false, TAGLIST, true /* nonmutable */); };
  var peg$f51 = function(TAGLIST) { return PF.makeBool(true, TAGLIST); };
  var peg$f52 = function(TAGLIST) { return PF.makeBool(false, TAGLIST); };
  var peg$f53 = function(TAGLIST, SYMBOL) { return PF.makeSymbol(SYMBOL, TAGLIST, true /* nonmutable */); };
  var peg$f54 = function(TAGLIST, SYMBOL) { return PF.makeSymbol(SYMBOL, TAGLIST); };
  var peg$f55 = function(SYMBOL_CHAR) { return SYMBOL_CHAR; };
  var peg$f56 = function() { return '_'; };
  var peg$f57 = function(TAGLIST, NEGATION, DIGITS) { return PF.makeInteger(NEGATION, DIGITS, TAGLIST, true /* nonmutable */); };
  var peg$f58 = function(TAGLIST, NEGATION, DIGITS) { return PF.makeInteger(NEGATION, DIGITS, TAGLIST); };
  var peg$f59 = function(TAGLIST, DATA) { return PF.makeString(DATA, TAGLIST, true /* nonmutable */); };
  var peg$f60 = function(TAGLIST, DATA) { return PF.makeString(DATA, TAGLIST); };
  var peg$f61 = function(TAGLIST, DATA) { return PF.makeError(DATA, TAGLIST, true /* nonmutable */); };
  var peg$f62 = function(TAGLIST, FLOAT) { return PF.makeFloat(FLOAT, TAGLIST, true /* nonmutable */); };
  var peg$f63 = function(TAGLIST, FLOAT) { return PF.makeFloat(FLOAT, TAGLIST); };
  var peg$f64 = function(TAGLIST) { return PF.makeNil(TAGLIST, true /* nonmutable */) };
  var peg$f65 = function() { return PF.makeNil(null, true /* nonmutable */) };
  var peg$f66 = function(INT_PART, DEC_DIGITS) {return DEC_DIGITS; };
  var peg$f67 = function(INT_PART, DEC_PART) { return  DEC_PART ? (INT_PART + '.' + DEC_PART) : INT_PART};
  var peg$f68 = function(DEC_DIGITS) { return '0.' + DEC_DIGITS; };
  var peg$f69 = function(DIGITS) { return DIGITS.join(''); };
  var peg$f70 = function(DIGITS) { return '-' + DIGITS.join(''); };
  var peg$f71 = function(TAGS) { return TAGS; };
  var peg$f72 = function(TAG) { return TAG; };
  var peg$f73 = function(TAG_DATA) { return TAG_DATA; };
  var peg$f74 = function(DATA) { return DATA; };
  var peg$f75 = function() { return null; };
  var peg$f76 = function(CHAR) { return CHAR; };
  var peg$f77 = function() { return RIGHT_BRACE; };
  var peg$f78 = function() { return '|'; };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$expected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return [peg$savedPos, peg$currPos];
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
  function peg$computeLocation(startPos, endPos) {
    var loc = {};

    if ( peg$VALIDFILENAME ) loc.filename = options.filename;

    var startPosDetails = peg$computePosDetails(startPos);
    loc.start = {
      offset: startPos,
      line: startPosDetails.line,
      column: startPosDetails.column
    };

    var endPosDetails = peg$computePosDetails(endPos);
    loc.end = {
      offset: endPos,
      line: endPosDetails.line,
      column: endPosDetails.column
    };

    return loc;
  }

  function peg$begin() {
    peg$expected.push({ pos: peg$currPos, variants: [] });
  }

  function peg$expect(expected) {
    var top = peg$expected[peg$expected.length - 1];

    if (peg$currPos < top.pos) { return; }

    if (peg$currPos > top.pos) {
      top.pos = peg$currPos;
      top.variants = [];
    }

    top.variants.push(expected);
  }

  function peg$end(invert) {
    var expected = peg$expected.pop();
    var top = peg$expected[peg$expected.length - 1];
    var variants = expected.variants;

    if (top.pos !== expected.pos) { return; }

    if (invert) {
      variants = variants.map(function(e) {
        return e.type === "not" ? e.expected : { type: "not", expected: e };
      });
    }

    Array.prototype.push.apply(top.variants, variants);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found, location),
      expected,
      found,
      location
    );
  }

  function peg$buildError() {
    var expected = peg$expected[0];
    var failPos = expected.pos;

    return peg$buildStructuredError(
      expected.variants,
      failPos < input.length ? input.charAt(failPos) : null,
      failPos < input.length
        ? peg$computeLocation(failPos, failPos + 1)
        : peg$computeLocation(failPos, failPos)
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseparser_version_identifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsenex();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f0(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparser_version_identifier() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e0);
    if (input.substr(peg$currPos, 3) === peg$c0) {
      s0 = peg$c0;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenex() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseatom();
    if (s0 === peg$FAILED) {
      s0 = peg$parselist();
    }

    return s0;
  }

  function peg$parselist() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseorg_list();
    if (s0 === peg$FAILED) {
      s0 = peg$parseexp_list();
      if (s0 === peg$FAILED) {
        s0 = peg$parselambda_list();
        if (s0 === peg$FAILED) {
          s0 = peg$parsecmd_list();
          if (s0 === peg$FAILED) {
            s0 = peg$parseinstance_list();
            if (s0 === peg$FAILED) {
              s0 = peg$parseinstantiator_list();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseinstance_list() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsenonmutable_instance_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseprivate_data_section();
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e1);
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetaglist();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = [];
          s6 = peg$parsenex_with_space();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsenex_with_space();
          }
          s6 = peg$parse_();
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c2;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f1(s1, s2, s4, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsenonmutable_instance_name();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprivate_data_section();
        if (s2 !== peg$FAILED) {
          rule$expects(peg$e3);
          if (input.substr(peg$currPos, 2) === peg$c3) {
            s3 = peg$c3;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetaglist();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = [];
            s6 = peg$parsenex_with_space();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsenex_with_space();
            }
            s6 = peg$parse_();
            rule$expects(peg$e4);
            if (input.substr(peg$currPos, 2) === peg$c4) {
              s7 = peg$c4;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f1(s1, s2, s4, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenonmutable_instance_name();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseprivate_data_section();
          if (s2 !== peg$FAILED) {
            rule$expects(peg$e5);
            if (input.substr(peg$currPos, 2) === peg$c5) {
              s3 = peg$c5;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetaglist();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = [];
              s6 = peg$parsenex_with_space();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsenex_with_space();
              }
              s6 = peg$parse_();
              rule$expects(peg$e6);
              if (input.substr(peg$currPos, 2) === peg$c6) {
                s7 = peg$c6;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f2(s1, s2, s4, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenonmutable_instance_name();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseprivate_data_section();
            if (s2 !== peg$FAILED) {
              rule$expects(peg$e7);
              if (input.substr(peg$currPos, 2) === peg$c7) {
                s3 = peg$c7;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetaglist();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s5 = [];
                s6 = peg$parsenex_with_space();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsenex_with_space();
                }
                s6 = peg$parse_();
                rule$expects(peg$e8);
                if (input.substr(peg$currPos, 2) === peg$c8) {
                  s7 = peg$c8;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f3(s1, s2, s4, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseinstance_name();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseprivate_data_section();
              if (s2 !== peg$FAILED) {
                rule$expects(peg$e1);
                if (input.charCodeAt(peg$currPos) === 40) {
                  s3 = peg$c1;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsetaglist();
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  s5 = [];
                  s6 = peg$parsenex_with_space();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parsenex_with_space();
                  }
                  s6 = peg$parse_();
                  rule$expects(peg$e2);
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c2;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f4(s1, s2, s4, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseinstance_name();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseprivate_data_section();
                if (s2 !== peg$FAILED) {
                  rule$expects(peg$e3);
                  if (input.substr(peg$currPos, 2) === peg$c3) {
                    s3 = peg$c3;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsetaglist();
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    s5 = [];
                    s6 = peg$parsenex_with_space();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parsenex_with_space();
                    }
                    s6 = peg$parse_();
                    rule$expects(peg$e4);
                    if (input.substr(peg$currPos, 2) === peg$c4) {
                      s7 = peg$c4;
                      peg$currPos += 2;
                    } else {
                      s7 = peg$FAILED;
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f4(s1, s2, s4, s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseinstance_name();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseprivate_data_section();
                  if (s2 !== peg$FAILED) {
                    rule$expects(peg$e5);
                    if (input.substr(peg$currPos, 2) === peg$c5) {
                      s3 = peg$c5;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsetaglist();
                      if (s4 === peg$FAILED) {
                        s4 = null;
                      }
                      s5 = [];
                      s6 = peg$parsenex_with_space();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parsenex_with_space();
                      }
                      s6 = peg$parse_();
                      rule$expects(peg$e6);
                      if (input.substr(peg$currPos, 2) === peg$c6) {
                        s7 = peg$c6;
                        peg$currPos += 2;
                      } else {
                        s7 = peg$FAILED;
                      }
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f5(s1, s2, s4, s5);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseinstance_name();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseprivate_data_section();
                    if (s2 !== peg$FAILED) {
                      rule$expects(peg$e7);
                      if (input.substr(peg$currPos, 2) === peg$c7) {
                        s3 = peg$c7;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsetaglist();
                        if (s4 === peg$FAILED) {
                          s4 = null;
                        }
                        s5 = [];
                        s6 = peg$parsenex_with_space();
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          s6 = peg$parsenex_with_space();
                        }
                        s6 = peg$parse_();
                        rule$expects(peg$e8);
                        if (input.substr(peg$currPos, 2) === peg$c8) {
                          s7 = peg$c8;
                          peg$currPos += 2;
                        } else {
                          s7 = peg$FAILED;
                        }
                        if (s7 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f6(s1, s2, s4, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseorg_list() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e9);
    if (input.charCodeAt(peg$currPos) === 59) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseprivate_data_section();
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e1);
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetaglist();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = [];
          s6 = peg$parsenex_with_space();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsenex_with_space();
          }
          s6 = peg$parse_();
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c2;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f7(s2, s4, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e9);
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprivate_data_section();
        if (s2 !== peg$FAILED) {
          rule$expects(peg$e3);
          if (input.substr(peg$currPos, 2) === peg$c3) {
            s3 = peg$c3;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetaglist();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = [];
            s6 = peg$parsenex_with_space();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsenex_with_space();
            }
            s6 = peg$parse_();
            rule$expects(peg$e4);
            if (input.substr(peg$currPos, 2) === peg$c4) {
              s7 = peg$c4;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f7(s2, s4, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e9);
        if (input.charCodeAt(peg$currPos) === 59) {
          s1 = peg$c9;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseprivate_data_section();
          if (s2 !== peg$FAILED) {
            rule$expects(peg$e5);
            if (input.substr(peg$currPos, 2) === peg$c5) {
              s3 = peg$c5;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetaglist();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = [];
              s6 = peg$parsenex_with_space();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsenex_with_space();
              }
              s6 = peg$parse_();
              rule$expects(peg$e6);
              if (input.substr(peg$currPos, 2) === peg$c6) {
                s7 = peg$c6;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f8(s2, s4, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          rule$expects(peg$e9);
          if (input.charCodeAt(peg$currPos) === 59) {
            s1 = peg$c9;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseprivate_data_section();
            if (s2 !== peg$FAILED) {
              rule$expects(peg$e7);
              if (input.substr(peg$currPos, 2) === peg$c7) {
                s3 = peg$c7;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetaglist();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s5 = [];
                s6 = peg$parsenex_with_space();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsenex_with_space();
                }
                s6 = peg$parse_();
                rule$expects(peg$e8);
                if (input.substr(peg$currPos, 2) === peg$c8) {
                  s7 = peg$c8;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f9(s2, s4, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseprivate_data_section();
            if (s1 !== peg$FAILED) {
              rule$expects(peg$e1);
              if (input.charCodeAt(peg$currPos) === 40) {
                s2 = peg$c1;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsetaglist();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                s4 = [];
                s5 = peg$parsenex_with_space();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parsenex_with_space();
                }
                s5 = peg$parse_();
                rule$expects(peg$e2);
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c2;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f10(s1, s3, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseprivate_data_section();
              if (s1 !== peg$FAILED) {
                rule$expects(peg$e3);
                if (input.substr(peg$currPos, 2) === peg$c3) {
                  s2 = peg$c3;
                  peg$currPos += 2;
                } else {
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsetaglist();
                  if (s3 === peg$FAILED) {
                    s3 = null;
                  }
                  s4 = [];
                  s5 = peg$parsenex_with_space();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parsenex_with_space();
                  }
                  s5 = peg$parse_();
                  rule$expects(peg$e4);
                  if (input.substr(peg$currPos, 2) === peg$c4) {
                    s6 = peg$c4;
                    peg$currPos += 2;
                  } else {
                    s6 = peg$FAILED;
                  }
                  if (s6 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f10(s1, s3, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseprivate_data_section();
                if (s1 !== peg$FAILED) {
                  rule$expects(peg$e5);
                  if (input.substr(peg$currPos, 2) === peg$c5) {
                    s2 = peg$c5;
                    peg$currPos += 2;
                  } else {
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsetaglist();
                    if (s3 === peg$FAILED) {
                      s3 = null;
                    }
                    s4 = [];
                    s5 = peg$parsenex_with_space();
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parsenex_with_space();
                    }
                    s5 = peg$parse_();
                    rule$expects(peg$e6);
                    if (input.substr(peg$currPos, 2) === peg$c6) {
                      s6 = peg$c6;
                      peg$currPos += 2;
                    } else {
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f11(s1, s3, s4);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseprivate_data_section();
                  if (s1 !== peg$FAILED) {
                    rule$expects(peg$e7);
                    if (input.substr(peg$currPos, 2) === peg$c7) {
                      s2 = peg$c7;
                      peg$currPos += 2;
                    } else {
                      s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsetaglist();
                      if (s3 === peg$FAILED) {
                        s3 = null;
                      }
                      s4 = [];
                      s5 = peg$parsenex_with_space();
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsenex_with_space();
                      }
                      s5 = peg$parse_();
                      rule$expects(peg$e8);
                      if (input.substr(peg$currPos, 2) === peg$c8) {
                        s6 = peg$c8;
                        peg$currPos += 2;
                      } else {
                        s6 = peg$FAILED;
                      }
                      if (s6 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f12(s1, s3, s4);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseexp_list() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e10);
    if (input.substr(peg$currPos, 2) === peg$c10) {
      s1 = peg$c10;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseprivate_data_section();
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e1);
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetaglist();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = [];
          s6 = peg$parsenex_with_space();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsenex_with_space();
          }
          s6 = peg$parse_();
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c2;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f13(s2, s4, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e10);
      if (input.substr(peg$currPos, 2) === peg$c10) {
        s1 = peg$c10;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprivate_data_section();
        if (s2 !== peg$FAILED) {
          rule$expects(peg$e3);
          if (input.substr(peg$currPos, 2) === peg$c3) {
            s3 = peg$c3;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetaglist();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = [];
            s6 = peg$parsenex_with_space();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsenex_with_space();
            }
            s6 = peg$parse_();
            rule$expects(peg$e4);
            if (input.substr(peg$currPos, 2) === peg$c4) {
              s7 = peg$c4;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f13(s2, s4, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e10);
        if (input.substr(peg$currPos, 2) === peg$c10) {
          s1 = peg$c10;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseprivate_data_section();
          if (s2 !== peg$FAILED) {
            rule$expects(peg$e5);
            if (input.substr(peg$currPos, 2) === peg$c5) {
              s3 = peg$c5;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetaglist();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = [];
              s6 = peg$parsenex_with_space();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsenex_with_space();
              }
              s6 = peg$parse_();
              rule$expects(peg$e6);
              if (input.substr(peg$currPos, 2) === peg$c6) {
                s7 = peg$c6;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f14(s2, s4, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          rule$expects(peg$e10);
          if (input.substr(peg$currPos, 2) === peg$c10) {
            s1 = peg$c10;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseprivate_data_section();
            if (s2 !== peg$FAILED) {
              rule$expects(peg$e7);
              if (input.substr(peg$currPos, 2) === peg$c7) {
                s3 = peg$c7;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetaglist();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s5 = [];
                s6 = peg$parsenex_with_space();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsenex_with_space();
                }
                s6 = peg$parse_();
                rule$expects(peg$e8);
                if (input.substr(peg$currPos, 2) === peg$c8) {
                  s7 = peg$c8;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f15(s2, s4, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            rule$expects(peg$e11);
            if (input.charCodeAt(peg$currPos) === 42) {
              s1 = peg$c11;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseprivate_data_section();
              if (s2 !== peg$FAILED) {
                rule$expects(peg$e1);
                if (input.charCodeAt(peg$currPos) === 40) {
                  s3 = peg$c1;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsetaglist();
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  s5 = [];
                  s6 = peg$parsenex_with_space();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parsenex_with_space();
                  }
                  s6 = peg$parse_();
                  rule$expects(peg$e2);
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c2;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f16(s2, s4, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              rule$expects(peg$e11);
              if (input.charCodeAt(peg$currPos) === 42) {
                s1 = peg$c11;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseprivate_data_section();
                if (s2 !== peg$FAILED) {
                  rule$expects(peg$e3);
                  if (input.substr(peg$currPos, 2) === peg$c3) {
                    s3 = peg$c3;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsetaglist();
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    s5 = [];
                    s6 = peg$parsenex_with_space();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parsenex_with_space();
                    }
                    s6 = peg$parse_();
                    rule$expects(peg$e4);
                    if (input.substr(peg$currPos, 2) === peg$c4) {
                      s7 = peg$c4;
                      peg$currPos += 2;
                    } else {
                      s7 = peg$FAILED;
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f16(s2, s4, s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                rule$expects(peg$e11);
                if (input.charCodeAt(peg$currPos) === 42) {
                  s1 = peg$c11;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseprivate_data_section();
                  if (s2 !== peg$FAILED) {
                    rule$expects(peg$e5);
                    if (input.substr(peg$currPos, 2) === peg$c5) {
                      s3 = peg$c5;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsetaglist();
                      if (s4 === peg$FAILED) {
                        s4 = null;
                      }
                      s5 = [];
                      s6 = peg$parsenex_with_space();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parsenex_with_space();
                      }
                      s6 = peg$parse_();
                      rule$expects(peg$e6);
                      if (input.substr(peg$currPos, 2) === peg$c6) {
                        s7 = peg$c6;
                        peg$currPos += 2;
                      } else {
                        s7 = peg$FAILED;
                      }
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f17(s2, s4, s5);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  rule$expects(peg$e11);
                  if (input.charCodeAt(peg$currPos) === 42) {
                    s1 = peg$c11;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseprivate_data_section();
                    if (s2 !== peg$FAILED) {
                      rule$expects(peg$e7);
                      if (input.substr(peg$currPos, 2) === peg$c7) {
                        s3 = peg$c7;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsetaglist();
                        if (s4 === peg$FAILED) {
                          s4 = null;
                        }
                        s5 = [];
                        s6 = peg$parsenex_with_space();
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          s6 = peg$parsenex_with_space();
                        }
                        s6 = peg$parse_();
                        rule$expects(peg$e8);
                        if (input.substr(peg$currPos, 2) === peg$c8) {
                          s7 = peg$c8;
                          peg$currPos += 2;
                        } else {
                          s7 = peg$FAILED;
                        }
                        if (s7 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f18(s2, s4, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parselambda_list() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e12);
    if (input.substr(peg$currPos, 2) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseprivate_data_section();
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e1);
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetaglist();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = [];
          s6 = peg$parsenex_with_space();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsenex_with_space();
          }
          s6 = peg$parse_();
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c2;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f19(s2, s4, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e12);
      if (input.substr(peg$currPos, 2) === peg$c12) {
        s1 = peg$c12;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprivate_data_section();
        if (s2 !== peg$FAILED) {
          rule$expects(peg$e3);
          if (input.substr(peg$currPos, 2) === peg$c3) {
            s3 = peg$c3;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetaglist();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = [];
            s6 = peg$parsenex_with_space();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsenex_with_space();
            }
            s6 = peg$parse_();
            rule$expects(peg$e4);
            if (input.substr(peg$currPos, 2) === peg$c4) {
              s7 = peg$c4;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f19(s2, s4, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e12);
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s1 = peg$c12;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseprivate_data_section();
          if (s2 !== peg$FAILED) {
            rule$expects(peg$e5);
            if (input.substr(peg$currPos, 2) === peg$c5) {
              s3 = peg$c5;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetaglist();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = [];
              s6 = peg$parsenex_with_space();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsenex_with_space();
              }
              s6 = peg$parse_();
              rule$expects(peg$e6);
              if (input.substr(peg$currPos, 2) === peg$c6) {
                s7 = peg$c6;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f20(s2, s4, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          rule$expects(peg$e12);
          if (input.substr(peg$currPos, 2) === peg$c12) {
            s1 = peg$c12;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseprivate_data_section();
            if (s2 !== peg$FAILED) {
              rule$expects(peg$e7);
              if (input.substr(peg$currPos, 2) === peg$c7) {
                s3 = peg$c7;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetaglist();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s5 = [];
                s6 = peg$parsenex_with_space();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsenex_with_space();
                }
                s6 = peg$parse_();
                rule$expects(peg$e8);
                if (input.substr(peg$currPos, 2) === peg$c8) {
                  s7 = peg$c8;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f21(s2, s4, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            rule$expects(peg$e13);
            if (input.charCodeAt(peg$currPos) === 38) {
              s1 = peg$c13;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseprivate_data_section();
              if (s2 !== peg$FAILED) {
                rule$expects(peg$e1);
                if (input.charCodeAt(peg$currPos) === 40) {
                  s3 = peg$c1;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsetaglist();
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  s5 = [];
                  s6 = peg$parsenex_with_space();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parsenex_with_space();
                  }
                  s6 = peg$parse_();
                  rule$expects(peg$e2);
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c2;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f22(s2, s4, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              rule$expects(peg$e13);
              if (input.charCodeAt(peg$currPos) === 38) {
                s1 = peg$c13;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseprivate_data_section();
                if (s2 !== peg$FAILED) {
                  rule$expects(peg$e3);
                  if (input.substr(peg$currPos, 2) === peg$c3) {
                    s3 = peg$c3;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsetaglist();
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    s5 = [];
                    s6 = peg$parsenex_with_space();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parsenex_with_space();
                    }
                    s6 = peg$parse_();
                    rule$expects(peg$e4);
                    if (input.substr(peg$currPos, 2) === peg$c4) {
                      s7 = peg$c4;
                      peg$currPos += 2;
                    } else {
                      s7 = peg$FAILED;
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f22(s2, s4, s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                rule$expects(peg$e13);
                if (input.charCodeAt(peg$currPos) === 38) {
                  s1 = peg$c13;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseprivate_data_section();
                  if (s2 !== peg$FAILED) {
                    rule$expects(peg$e5);
                    if (input.substr(peg$currPos, 2) === peg$c5) {
                      s3 = peg$c5;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsetaglist();
                      if (s4 === peg$FAILED) {
                        s4 = null;
                      }
                      s5 = [];
                      s6 = peg$parsenex_with_space();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parsenex_with_space();
                      }
                      s6 = peg$parse_();
                      rule$expects(peg$e6);
                      if (input.substr(peg$currPos, 2) === peg$c6) {
                        s7 = peg$c6;
                        peg$currPos += 2;
                      } else {
                        s7 = peg$FAILED;
                      }
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f23(s2, s4, s5);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  rule$expects(peg$e13);
                  if (input.charCodeAt(peg$currPos) === 38) {
                    s1 = peg$c13;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseprivate_data_section();
                    if (s2 !== peg$FAILED) {
                      rule$expects(peg$e7);
                      if (input.substr(peg$currPos, 2) === peg$c7) {
                        s3 = peg$c7;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsetaglist();
                        if (s4 === peg$FAILED) {
                          s4 = null;
                        }
                        s5 = [];
                        s6 = peg$parsenex_with_space();
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          s6 = peg$parsenex_with_space();
                        }
                        s6 = peg$parse_();
                        rule$expects(peg$e8);
                        if (input.substr(peg$currPos, 2) === peg$c8) {
                          s7 = peg$c8;
                          peg$currPos += 2;
                        } else {
                          s7 = peg$FAILED;
                        }
                        if (s7 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f24(s2, s4, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecmd_list() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e14);
    if (input.substr(peg$currPos, 2) === peg$c14) {
      s1 = peg$c14;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseprivate_data_section();
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e1);
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetaglist();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = [];
          s6 = peg$parsenex_with_space();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsenex_with_space();
          }
          s6 = peg$parse_();
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c2;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f25(s2, s4, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e14);
      if (input.substr(peg$currPos, 2) === peg$c14) {
        s1 = peg$c14;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprivate_data_section();
        if (s2 !== peg$FAILED) {
          rule$expects(peg$e3);
          if (input.substr(peg$currPos, 2) === peg$c3) {
            s3 = peg$c3;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetaglist();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = [];
            s6 = peg$parsenex_with_space();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsenex_with_space();
            }
            s6 = peg$parse_();
            rule$expects(peg$e4);
            if (input.substr(peg$currPos, 2) === peg$c4) {
              s7 = peg$c4;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f25(s2, s4, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e14);
        if (input.substr(peg$currPos, 2) === peg$c14) {
          s1 = peg$c14;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseprivate_data_section();
          if (s2 !== peg$FAILED) {
            rule$expects(peg$e5);
            if (input.substr(peg$currPos, 2) === peg$c5) {
              s3 = peg$c5;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetaglist();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = [];
              s6 = peg$parsenex_with_space();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsenex_with_space();
              }
              s6 = peg$parse_();
              rule$expects(peg$e6);
              if (input.substr(peg$currPos, 2) === peg$c6) {
                s7 = peg$c6;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f26(s2, s4, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          rule$expects(peg$e14);
          if (input.substr(peg$currPos, 2) === peg$c14) {
            s1 = peg$c14;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseprivate_data_section();
            if (s2 !== peg$FAILED) {
              rule$expects(peg$e7);
              if (input.substr(peg$currPos, 2) === peg$c7) {
                s3 = peg$c7;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetaglist();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s5 = [];
                s6 = peg$parsenex_with_space();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsenex_with_space();
                }
                s6 = peg$parse_();
                rule$expects(peg$e8);
                if (input.substr(peg$currPos, 2) === peg$c8) {
                  s7 = peg$c8;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27(s2, s4, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            rule$expects(peg$e14);
            if (input.substr(peg$currPos, 2) === peg$c14) {
              s1 = peg$c14;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseprivate_data_section();
              if (s2 !== peg$FAILED) {
                rule$expects(peg$e1);
                if (input.charCodeAt(peg$currPos) === 40) {
                  s3 = peg$c1;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsetaglist();
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  s5 = peg$parsecmd_name();
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parsews();
                    if (s7 !== peg$FAILED) {
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parsews();
                      }
                    } else {
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parsenex_with_space();
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parsenex_with_space();
                      }
                      s8 = peg$parse_();
                      rule$expects(peg$e2);
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s9 = peg$c2;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f28(s2, s4, s5, s7);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              rule$expects(peg$e14);
              if (input.substr(peg$currPos, 2) === peg$c14) {
                s1 = peg$c14;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseprivate_data_section();
                if (s2 !== peg$FAILED) {
                  rule$expects(peg$e3);
                  if (input.substr(peg$currPos, 2) === peg$c3) {
                    s3 = peg$c3;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsetaglist();
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    s5 = peg$parsecmd_name();
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$parsews();
                      if (s7 !== peg$FAILED) {
                        while (s7 !== peg$FAILED) {
                          s6.push(s7);
                          s7 = peg$parsews();
                        }
                      } else {
                        s6 = peg$FAILED;
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = [];
                        s8 = peg$parsenex_with_space();
                        while (s8 !== peg$FAILED) {
                          s7.push(s8);
                          s8 = peg$parsenex_with_space();
                        }
                        s8 = peg$parse_();
                        rule$expects(peg$e4);
                        if (input.substr(peg$currPos, 2) === peg$c4) {
                          s9 = peg$c4;
                          peg$currPos += 2;
                        } else {
                          s9 = peg$FAILED;
                        }
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f28(s2, s4, s5, s7);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                rule$expects(peg$e14);
                if (input.substr(peg$currPos, 2) === peg$c14) {
                  s1 = peg$c14;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseprivate_data_section();
                  if (s2 !== peg$FAILED) {
                    rule$expects(peg$e5);
                    if (input.substr(peg$currPos, 2) === peg$c5) {
                      s3 = peg$c5;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsetaglist();
                      if (s4 === peg$FAILED) {
                        s4 = null;
                      }
                      s5 = peg$parsecmd_name();
                      if (s5 !== peg$FAILED) {
                        s6 = [];
                        s7 = peg$parsews();
                        if (s7 !== peg$FAILED) {
                          while (s7 !== peg$FAILED) {
                            s6.push(s7);
                            s7 = peg$parsews();
                          }
                        } else {
                          s6 = peg$FAILED;
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = [];
                          s8 = peg$parsenex_with_space();
                          while (s8 !== peg$FAILED) {
                            s7.push(s8);
                            s8 = peg$parsenex_with_space();
                          }
                          s8 = peg$parse_();
                          rule$expects(peg$e6);
                          if (input.substr(peg$currPos, 2) === peg$c6) {
                            s9 = peg$c6;
                            peg$currPos += 2;
                          } else {
                            s9 = peg$FAILED;
                          }
                          if (s9 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f29(s2, s4, s5, s7);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  rule$expects(peg$e14);
                  if (input.substr(peg$currPos, 2) === peg$c14) {
                    s1 = peg$c14;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseprivate_data_section();
                    if (s2 !== peg$FAILED) {
                      rule$expects(peg$e7);
                      if (input.substr(peg$currPos, 2) === peg$c7) {
                        s3 = peg$c7;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsetaglist();
                        if (s4 === peg$FAILED) {
                          s4 = null;
                        }
                        s5 = peg$parsecmd_name();
                        if (s5 !== peg$FAILED) {
                          s6 = [];
                          s7 = peg$parsews();
                          if (s7 !== peg$FAILED) {
                            while (s7 !== peg$FAILED) {
                              s6.push(s7);
                              s7 = peg$parsews();
                            }
                          } else {
                            s6 = peg$FAILED;
                          }
                          if (s6 !== peg$FAILED) {
                            s7 = [];
                            s8 = peg$parsenex_with_space();
                            while (s8 !== peg$FAILED) {
                              s7.push(s8);
                              s8 = peg$parsenex_with_space();
                            }
                            s8 = peg$parse_();
                            rule$expects(peg$e8);
                            if (input.substr(peg$currPos, 2) === peg$c8) {
                              s9 = peg$c8;
                              peg$currPos += 2;
                            } else {
                              s9 = peg$FAILED;
                            }
                            if (s9 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f30(s2, s4, s5, s7);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    rule$expects(peg$e15);
                    if (input.charCodeAt(peg$currPos) === 126) {
                      s1 = peg$c15;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseprivate_data_section();
                      if (s2 !== peg$FAILED) {
                        rule$expects(peg$e1);
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s3 = peg$c1;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsetaglist();
                          if (s4 === peg$FAILED) {
                            s4 = null;
                          }
                          s5 = [];
                          s6 = peg$parsenex_with_space();
                          while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parsenex_with_space();
                          }
                          s6 = peg$parse_();
                          rule$expects(peg$e2);
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s7 = peg$c2;
                            peg$currPos++;
                          } else {
                            s7 = peg$FAILED;
                          }
                          if (s7 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f31(s2, s4, s5);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      rule$expects(peg$e15);
                      if (input.charCodeAt(peg$currPos) === 126) {
                        s1 = peg$c15;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseprivate_data_section();
                        if (s2 !== peg$FAILED) {
                          rule$expects(peg$e3);
                          if (input.substr(peg$currPos, 2) === peg$c3) {
                            s3 = peg$c3;
                            peg$currPos += 2;
                          } else {
                            s3 = peg$FAILED;
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$parsetaglist();
                            if (s4 === peg$FAILED) {
                              s4 = null;
                            }
                            s5 = [];
                            s6 = peg$parsenex_with_space();
                            while (s6 !== peg$FAILED) {
                              s5.push(s6);
                              s6 = peg$parsenex_with_space();
                            }
                            s6 = peg$parse_();
                            rule$expects(peg$e4);
                            if (input.substr(peg$currPos, 2) === peg$c4) {
                              s7 = peg$c4;
                              peg$currPos += 2;
                            } else {
                              s7 = peg$FAILED;
                            }
                            if (s7 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f31(s2, s4, s5);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        rule$expects(peg$e15);
                        if (input.charCodeAt(peg$currPos) === 126) {
                          s1 = peg$c15;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseprivate_data_section();
                          if (s2 !== peg$FAILED) {
                            rule$expects(peg$e5);
                            if (input.substr(peg$currPos, 2) === peg$c5) {
                              s3 = peg$c5;
                              peg$currPos += 2;
                            } else {
                              s3 = peg$FAILED;
                            }
                            if (s3 !== peg$FAILED) {
                              s4 = peg$parsetaglist();
                              if (s4 === peg$FAILED) {
                                s4 = null;
                              }
                              s5 = [];
                              s6 = peg$parsenex_with_space();
                              while (s6 !== peg$FAILED) {
                                s5.push(s6);
                                s6 = peg$parsenex_with_space();
                              }
                              s6 = peg$parse_();
                              rule$expects(peg$e6);
                              if (input.substr(peg$currPos, 2) === peg$c6) {
                                s7 = peg$c6;
                                peg$currPos += 2;
                              } else {
                                s7 = peg$FAILED;
                              }
                              if (s7 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f32(s2, s4, s5);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          rule$expects(peg$e15);
                          if (input.charCodeAt(peg$currPos) === 126) {
                            s1 = peg$c15;
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                          }
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseprivate_data_section();
                            if (s2 !== peg$FAILED) {
                              rule$expects(peg$e7);
                              if (input.substr(peg$currPos, 2) === peg$c7) {
                                s3 = peg$c7;
                                peg$currPos += 2;
                              } else {
                                s3 = peg$FAILED;
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parsetaglist();
                                if (s4 === peg$FAILED) {
                                  s4 = null;
                                }
                                s5 = [];
                                s6 = peg$parsenex_with_space();
                                while (s6 !== peg$FAILED) {
                                  s5.push(s6);
                                  s6 = peg$parsenex_with_space();
                                }
                                s6 = peg$parse_();
                                rule$expects(peg$e8);
                                if (input.substr(peg$currPos, 2) === peg$c8) {
                                  s7 = peg$c8;
                                  peg$currPos += 2;
                                } else {
                                  s7 = peg$FAILED;
                                }
                                if (s7 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f33(s2, s4, s5);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            rule$expects(peg$e15);
                            if (input.charCodeAt(peg$currPos) === 126) {
                              s1 = peg$c15;
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                            }
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseprivate_data_section();
                              if (s2 !== peg$FAILED) {
                                rule$expects(peg$e1);
                                if (input.charCodeAt(peg$currPos) === 40) {
                                  s3 = peg$c1;
                                  peg$currPos++;
                                } else {
                                  s3 = peg$FAILED;
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsetaglist();
                                  if (s4 === peg$FAILED) {
                                    s4 = null;
                                  }
                                  s5 = peg$parsecmd_name();
                                  if (s5 !== peg$FAILED) {
                                    s6 = [];
                                    s7 = peg$parsews();
                                    if (s7 !== peg$FAILED) {
                                      while (s7 !== peg$FAILED) {
                                        s6.push(s7);
                                        s7 = peg$parsews();
                                      }
                                    } else {
                                      s6 = peg$FAILED;
                                    }
                                    if (s6 !== peg$FAILED) {
                                      s7 = [];
                                      s8 = peg$parsenex_with_space();
                                      while (s8 !== peg$FAILED) {
                                        s7.push(s8);
                                        s8 = peg$parsenex_with_space();
                                      }
                                      s8 = peg$parse_();
                                      rule$expects(peg$e2);
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s9 = peg$c2;
                                        peg$currPos++;
                                      } else {
                                        s9 = peg$FAILED;
                                      }
                                      if (s9 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f34(s2, s4, s5, s7);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              rule$expects(peg$e15);
                              if (input.charCodeAt(peg$currPos) === 126) {
                                s1 = peg$c15;
                                peg$currPos++;
                              } else {
                                s1 = peg$FAILED;
                              }
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseprivate_data_section();
                                if (s2 !== peg$FAILED) {
                                  rule$expects(peg$e3);
                                  if (input.substr(peg$currPos, 2) === peg$c3) {
                                    s3 = peg$c3;
                                    peg$currPos += 2;
                                  } else {
                                    s3 = peg$FAILED;
                                  }
                                  if (s3 !== peg$FAILED) {
                                    s4 = peg$parsetaglist();
                                    if (s4 === peg$FAILED) {
                                      s4 = null;
                                    }
                                    s5 = peg$parsecmd_name();
                                    if (s5 !== peg$FAILED) {
                                      s6 = [];
                                      s7 = peg$parsews();
                                      if (s7 !== peg$FAILED) {
                                        while (s7 !== peg$FAILED) {
                                          s6.push(s7);
                                          s7 = peg$parsews();
                                        }
                                      } else {
                                        s6 = peg$FAILED;
                                      }
                                      if (s6 !== peg$FAILED) {
                                        s7 = [];
                                        s8 = peg$parsenex_with_space();
                                        while (s8 !== peg$FAILED) {
                                          s7.push(s8);
                                          s8 = peg$parsenex_with_space();
                                        }
                                        s8 = peg$parse_();
                                        rule$expects(peg$e4);
                                        if (input.substr(peg$currPos, 2) === peg$c4) {
                                          s9 = peg$c4;
                                          peg$currPos += 2;
                                        } else {
                                          s9 = peg$FAILED;
                                        }
                                        if (s9 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s0 = peg$f34(s2, s4, s5, s7);
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                rule$expects(peg$e15);
                                if (input.charCodeAt(peg$currPos) === 126) {
                                  s1 = peg$c15;
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseprivate_data_section();
                                  if (s2 !== peg$FAILED) {
                                    rule$expects(peg$e5);
                                    if (input.substr(peg$currPos, 2) === peg$c5) {
                                      s3 = peg$c5;
                                      peg$currPos += 2;
                                    } else {
                                      s3 = peg$FAILED;
                                    }
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parsetaglist();
                                      if (s4 === peg$FAILED) {
                                        s4 = null;
                                      }
                                      s5 = peg$parsecmd_name();
                                      if (s5 !== peg$FAILED) {
                                        s6 = [];
                                        s7 = peg$parsews();
                                        if (s7 !== peg$FAILED) {
                                          while (s7 !== peg$FAILED) {
                                            s6.push(s7);
                                            s7 = peg$parsews();
                                          }
                                        } else {
                                          s6 = peg$FAILED;
                                        }
                                        if (s6 !== peg$FAILED) {
                                          s7 = [];
                                          s8 = peg$parsenex_with_space();
                                          while (s8 !== peg$FAILED) {
                                            s7.push(s8);
                                            s8 = peg$parsenex_with_space();
                                          }
                                          s8 = peg$parse_();
                                          rule$expects(peg$e6);
                                          if (input.substr(peg$currPos, 2) === peg$c6) {
                                            s9 = peg$c6;
                                            peg$currPos += 2;
                                          } else {
                                            s9 = peg$FAILED;
                                          }
                                          if (s9 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s0 = peg$f35(s2, s4, s5, s7);
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  rule$expects(peg$e15);
                                  if (input.charCodeAt(peg$currPos) === 126) {
                                    s1 = peg$c15;
                                    peg$currPos++;
                                  } else {
                                    s1 = peg$FAILED;
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseprivate_data_section();
                                    if (s2 !== peg$FAILED) {
                                      rule$expects(peg$e7);
                                      if (input.substr(peg$currPos, 2) === peg$c7) {
                                        s3 = peg$c7;
                                        peg$currPos += 2;
                                      } else {
                                        s3 = peg$FAILED;
                                      }
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parsetaglist();
                                        if (s4 === peg$FAILED) {
                                          s4 = null;
                                        }
                                        s5 = peg$parsecmd_name();
                                        if (s5 !== peg$FAILED) {
                                          s6 = [];
                                          s7 = peg$parsews();
                                          if (s7 !== peg$FAILED) {
                                            while (s7 !== peg$FAILED) {
                                              s6.push(s7);
                                              s7 = peg$parsews();
                                            }
                                          } else {
                                            s6 = peg$FAILED;
                                          }
                                          if (s6 !== peg$FAILED) {
                                            s7 = [];
                                            s8 = peg$parsenex_with_space();
                                            while (s8 !== peg$FAILED) {
                                              s7.push(s8);
                                              s8 = peg$parsenex_with_space();
                                            }
                                            s8 = peg$parse_();
                                            rule$expects(peg$e8);
                                            if (input.substr(peg$currPos, 2) === peg$c8) {
                                              s9 = peg$c8;
                                              peg$currPos += 2;
                                            } else {
                                              s9 = peg$FAILED;
                                            }
                                            if (s9 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s0 = peg$f36(s2, s4, s5, s7);
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseinstantiator_list() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e16);
    if (input.substr(peg$currPos, 2) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseprivate_data_section();
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e1);
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetaglist();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = [];
          s6 = peg$parsenex_with_space();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsenex_with_space();
          }
          s6 = peg$parse_();
          rule$expects(peg$e2);
          if (input.charCodeAt(peg$currPos) === 41) {
            s7 = peg$c2;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f37(s2, s4, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e16);
      if (input.substr(peg$currPos, 2) === peg$c16) {
        s1 = peg$c16;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprivate_data_section();
        if (s2 !== peg$FAILED) {
          rule$expects(peg$e3);
          if (input.substr(peg$currPos, 2) === peg$c3) {
            s3 = peg$c3;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsetaglist();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            s5 = [];
            s6 = peg$parsenex_with_space();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsenex_with_space();
            }
            s6 = peg$parse_();
            rule$expects(peg$e4);
            if (input.substr(peg$currPos, 2) === peg$c4) {
              s7 = peg$c4;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f37(s2, s4, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e16);
        if (input.substr(peg$currPos, 2) === peg$c16) {
          s1 = peg$c16;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseprivate_data_section();
          if (s2 !== peg$FAILED) {
            rule$expects(peg$e5);
            if (input.substr(peg$currPos, 2) === peg$c5) {
              s3 = peg$c5;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetaglist();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = [];
              s6 = peg$parsenex_with_space();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsenex_with_space();
              }
              s6 = peg$parse_();
              rule$expects(peg$e6);
              if (input.substr(peg$currPos, 2) === peg$c6) {
                s7 = peg$c6;
                peg$currPos += 2;
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f38(s2, s4, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          rule$expects(peg$e16);
          if (input.substr(peg$currPos, 2) === peg$c16) {
            s1 = peg$c16;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseprivate_data_section();
            if (s2 !== peg$FAILED) {
              rule$expects(peg$e7);
              if (input.substr(peg$currPos, 2) === peg$c7) {
                s3 = peg$c7;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetaglist();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                s5 = [];
                s6 = peg$parsenex_with_space();
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsenex_with_space();
                }
                s6 = peg$parse_();
                rule$expects(peg$e8);
                if (input.substr(peg$currPos, 2) === peg$c8) {
                  s7 = peg$c8;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f39(s2, s4, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            rule$expects(peg$e17);
            if (input.charCodeAt(peg$currPos) === 94) {
              s1 = peg$c17;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseprivate_data_section();
              if (s2 !== peg$FAILED) {
                rule$expects(peg$e1);
                if (input.charCodeAt(peg$currPos) === 40) {
                  s3 = peg$c1;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsetaglist();
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  s5 = [];
                  s6 = peg$parsenex_with_space();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parsenex_with_space();
                  }
                  s6 = peg$parse_();
                  rule$expects(peg$e2);
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c2;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f40(s2, s4, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              rule$expects(peg$e17);
              if (input.charCodeAt(peg$currPos) === 94) {
                s1 = peg$c17;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseprivate_data_section();
                if (s2 !== peg$FAILED) {
                  rule$expects(peg$e3);
                  if (input.substr(peg$currPos, 2) === peg$c3) {
                    s3 = peg$c3;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsetaglist();
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    s5 = [];
                    s6 = peg$parsenex_with_space();
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parsenex_with_space();
                    }
                    s6 = peg$parse_();
                    rule$expects(peg$e4);
                    if (input.substr(peg$currPos, 2) === peg$c4) {
                      s7 = peg$c4;
                      peg$currPos += 2;
                    } else {
                      s7 = peg$FAILED;
                    }
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f40(s2, s4, s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                rule$expects(peg$e17);
                if (input.charCodeAt(peg$currPos) === 94) {
                  s1 = peg$c17;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseprivate_data_section();
                  if (s2 !== peg$FAILED) {
                    rule$expects(peg$e5);
                    if (input.substr(peg$currPos, 2) === peg$c5) {
                      s3 = peg$c5;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parsetaglist();
                      if (s4 === peg$FAILED) {
                        s4 = null;
                      }
                      s5 = [];
                      s6 = peg$parsenex_with_space();
                      while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parsenex_with_space();
                      }
                      s6 = peg$parse_();
                      rule$expects(peg$e6);
                      if (input.substr(peg$currPos, 2) === peg$c6) {
                        s7 = peg$c6;
                        peg$currPos += 2;
                      } else {
                        s7 = peg$FAILED;
                      }
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f41(s2, s4, s5);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  rule$expects(peg$e17);
                  if (input.charCodeAt(peg$currPos) === 94) {
                    s1 = peg$c17;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseprivate_data_section();
                    if (s2 !== peg$FAILED) {
                      rule$expects(peg$e7);
                      if (input.substr(peg$currPos, 2) === peg$c7) {
                        s3 = peg$c7;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                      }
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsetaglist();
                        if (s4 === peg$FAILED) {
                          s4 = null;
                        }
                        s5 = [];
                        s6 = peg$parsenex_with_space();
                        while (s6 !== peg$FAILED) {
                          s5.push(s6);
                          s6 = peg$parsenex_with_space();
                        }
                        s6 = peg$parse_();
                        rule$expects(peg$e8);
                        if (input.substr(peg$currPos, 2) === peg$c8) {
                          s7 = peg$c8;
                          peg$currPos += 2;
                        } else {
                          s7 = peg$FAILED;
                        }
                        if (s7 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f42(s2, s4, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecmd_name() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    rule$expects(peg$e18);
    if (input.charCodeAt(peg$currPos) === 58) {
      s2 = peg$c18;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      rule$expects(peg$e19);
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        rule$expects(peg$e19);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f43(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      rule$expects(peg$e18);
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c18;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e19);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f43(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        rule$expects(peg$e20);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          rule$expects(peg$e20);
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s1 = peg$f44(s1);
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseinstantiator_org_name() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f44(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsechildren_in_parens() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c1;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsenex_with_space();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsenex_with_space();
      }
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f45(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenex_with_space() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsenex();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f0(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseatom() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseboolean_expression();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesymbol_expression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseinteger_expression();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestring_expression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseerror_expression();
            if (s0 === peg$FAILED) {
              s0 = peg$parsefloat_expression();
              if (s0 === peg$FAILED) {
                s0 = peg$parseinstance_atom();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseinstance_atom() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsenonmutable_instance_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseprivate_data_section();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetaglist();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$currPos;
        peg$begin();
        rule$expects(peg$e1);
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c1;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        peg$end(true);
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f46(s1, s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseinstance_name();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseprivate_data_section();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetaglist();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$currPos;
          peg$begin();
          rule$expects(peg$e1);
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c1;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          peg$end(true);
          if (s5 === peg$FAILED) {
            s4 = undefined;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f47(s1, s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseinstance_name() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e21);
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c19;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinstance_name_data();
      rule$expects(peg$e22);
      if (input.charCodeAt(peg$currPos) === 93) {
        s3 = peg$c20;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f48(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenonmutable_instance_name() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e23);
    if (input.substr(peg$currPos, 2) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseinstance_name_data();
      rule$expects(peg$e22);
      if (input.charCodeAt(peg$currPos) === 93) {
        s3 = peg$c20;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f48(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinstance_name_data() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = [];
    rule$expects(peg$e24);
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      rule$expects(peg$e24);
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseboolean_expression() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e25);
    if (input.substr(peg$currPos, 2) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetaglist();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      rule$expects(peg$e26);
      if (input.substr(peg$currPos, 3) === peg$c23) {
        s3 = peg$c23;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f49(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e25);
      if (input.substr(peg$currPos, 2) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetaglist();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        rule$expects(peg$e27);
        if (input.substr(peg$currPos, 2) === peg$c24) {
          s3 = peg$c24;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f50(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e28);
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c25;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetaglist();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          rule$expects(peg$e26);
          if (input.substr(peg$currPos, 3) === peg$c23) {
            s3 = peg$c23;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f51(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          rule$expects(peg$e28);
          if (input.charCodeAt(peg$currPos) === 33) {
            s1 = peg$c25;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsetaglist();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            rule$expects(peg$e27);
            if (input.substr(peg$currPos, 2) === peg$c24) {
              s3 = peg$c24;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f52(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsesymbol_expression() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e29);
    if (input.substr(peg$currPos, 2) === peg$c26) {
      s1 = peg$c26;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetaglist();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$parsesymbol_char();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsesymbol_char();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f53(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e30);
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c27;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetaglist();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = [];
        s4 = peg$parsesymbol_char();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsesymbol_char();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f54(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesymbol_char() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e20);
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f55(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e31);
      if (input.charCodeAt(peg$currPos) === 95) {
        s1 = peg$c28;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$begin();
        rule$expects(peg$e2);
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c2;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        peg$end(true);
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f56();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseinteger_expression() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e32);
    if (input.substr(peg$currPos, 2) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetaglist();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      rule$expects(peg$e33);
      if (input.charCodeAt(peg$currPos) === 45) {
        s3 = peg$c30;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = [];
      rule$expects(peg$e34);
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          rule$expects(peg$e34);
          if (peg$r4.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f57(s2, s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e35);
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c31;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetaglist();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        rule$expects(peg$e33);
        if (input.charCodeAt(peg$currPos) === 45) {
          s3 = peg$c30;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = [];
        rule$expects(peg$e34);
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            rule$expects(peg$e34);
            if (peg$r4.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f58(s2, s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsestring_expression() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e36);
    if (input.substr(peg$currPos, 2) === peg$c32) {
      s1 = peg$c32;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetaglist();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseprivate_data_section();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f59(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e37);
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c33;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetaglist();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parseprivate_data_section();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f60(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseerror_expression() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e38);
    if (input.charCodeAt(peg$currPos) === 63) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetaglist();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseprivate_data_section();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f61(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefloat_expression() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e39);
    if (input.substr(peg$currPos, 2) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetaglist();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parsefloat_digits();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f62(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e40);
      if (input.charCodeAt(peg$currPos) === 37) {
        s1 = peg$c36;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetaglist();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s3 = peg$parsefloat_digits();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f63(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsenil_expression() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsetaglist();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$begin();
        if (input.charCodeAt(peg$currPos) === 40) {
          s4 = peg$c1;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        peg$end(true);
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f64(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetaglist();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$begin();
          if (input.charCodeAt(peg$currPos) === 34) {
            s4 = peg$c37;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          peg$end(true);
          if (s4 === peg$FAILED) {
            s3 = undefined;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f64(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 94) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetaglist();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$begin();
            if (input.charCodeAt(peg$currPos) === 123) {
              s4 = peg$c38;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
            }
            peg$end(true);
            if (s4 === peg$FAILED) {
              s3 = undefined;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f64(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 94) {
            s1 = peg$c17;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$begin();
            if (input.charCodeAt(peg$currPos) === 40) {
              s3 = peg$c1;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
            }
            peg$end(true);
            if (s3 === peg$FAILED) {
              s2 = undefined;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f65();
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 94) {
              s1 = peg$c17;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$begin();
              if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c37;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
              }
              peg$end(true);
              if (s3 === peg$FAILED) {
                s2 = undefined;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f65();
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 94) {
                s1 = peg$c17;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$begin();
                if (input.charCodeAt(peg$currPos) === 123) {
                  s3 = peg$c38;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                }
                peg$end(true);
                if (s3 === peg$FAILED) {
                  s2 = undefined;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f65();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefloat_digits() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseinteger_part();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      rule$expects(peg$e41);
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c39;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsedecimal_part();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f66(s1, s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f67(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e41);
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c39;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedecimal_part();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f68(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseinteger_part() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    rule$expects(peg$e34);
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        rule$expects(peg$e34);
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f69(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e33);
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c30;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        rule$expects(peg$e34);
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            rule$expects(peg$e34);
            if (peg$r4.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f70(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedecimal_part() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = [];
    rule$expects(peg$e34);
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        rule$expects(peg$e34);
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f69(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetaglist() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e42);
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c40;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsetagwithspace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsetagwithspace();
      }
      s3 = peg$parse_();
      rule$expects(peg$e43);
      if (input.charCodeAt(peg$currPos) === 62) {
        s4 = peg$c41;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f71(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetagwithspace() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsetag();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f72(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetag() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e44);
    if (input.charCodeAt(peg$currPos) === 96) {
      s1 = peg$c42;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      rule$expects(peg$e45);
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        rule$expects(peg$e45);
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
      }
      rule$expects(peg$e44);
      if (input.charCodeAt(peg$currPos) === 96) {
        s3 = peg$c42;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f73(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprivate_data_section() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e46);
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c37;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      rule$expects(peg$e47);
      if (peg$r6.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        rule$expects(peg$e47);
        if (peg$r6.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
      }
      rule$expects(peg$e46);
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c37;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f74(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e48);
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c38;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseescaped_private_data();
        rule$expects(peg$e49);
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c43;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f74(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = '';
        peg$savedPos = s0;
        s1 = peg$f75();
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseescaped_private_data() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = [];
    s1 = peg$parseprivate_data_item();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseprivate_data_item();
    }

    return s0;
  }

  function peg$parseprivate_data_item() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e50);
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f76(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e51);
      if (input.substr(peg$currPos, 2) === peg$c44) {
        s1 = peg$c44;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f77();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        rule$expects(peg$e52);
        if (input.substr(peg$currPos, 2) === peg$c45) {
          s1 = peg$c45;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f78();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = [];
    s1 = peg$parsews();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsews();
    }

    return s0;
  }

  function peg$parsews() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e53);
    if (peg$r8.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }


    const RIGHT_BRACE = String.fromCharCode(125);
    const BACKTICK = String.fromCharCode(96);


  peg$begin();
  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$expect(peg$endExpectation());
    }

    throw peg$buildError();
  }
}

export {
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};

export default {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
